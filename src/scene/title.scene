<scene name="title">
  <scenario>
    <show mode="bg" src="./src/resource/background/title_bg3.png" />
    <if condition="getDevice() == 'mobile'">
      <then>
        <choice prompt="どちらで判定しますか？">
          <item label="判定を開始する（カメラ撮影）">
            <call method="getPicture(0)" />
          </item>
          <item label="判定を開始する（画像から）">
            <call method="getPicture(1)" />
            <text>画像を選んだら、タップしてください</text>
          </item>
        </choice>
      </then>
      <else>
        <choice prompt="">
          <item label="判定を開始する（画像から）">
            <call method="getPicture(1)" />
            <text>画像を選んだら、タップしてください</text>
          </item>
        </choice>
      </else>
    </if>
    <wait />
    <show mode="bg" src="./src/resource/background/title_bg4.png" />
    <text time="1000">測定中.</text>
    <text time="1000">測定中..</text>
    <text time="1000">測定中...</text>
    <show mode="bg" src="./src/resource/background/title_bg5.png" />
    <call method="clearText()" />
    <call method="showResult()" />
    <wait />
    <choice>
      <item label="もう一度判定する">
        <call method="clear()" />
        <jump index="0" />
      </item>
      <item label="Xに投稿する">
        <call method="shareToX(result)" />
        <call method="clear()" />
        <text>Xへ投稿ありがとう</text>
      </item>
    </choice>
    <wait />
    <choice>
      <item label="もう一度判定する">
        <call method="clear()" />
        <jump index="0" />
      </item>
    </choice>
  </scenario>
  <script type="text/typescript">
       // webTaleKitのインスタンス
       let api: any = null;
       
       // シーン設定
       export const sceneConfig = {
           name: 'title',
           background: './src/resource/background/title_bg.png',
           bgm: './src/resource/bgm/ichi.mp3',
           template: './src/screen/title.html'
       }

        // 診断結果データ
       export let result = {
           score: 0,
           message: '',
           advice: ''
       }

       // 診断メッセージデータ
       export const shariMessages = {
           perfect: [
               "完璧なシャリ顔！寿司職人からのスカウトに注意です！",
               "あなたを見ると酢飯が炊きたくなります！",
               "これぞ正真正銘のシャリ男！",
               "シャリ界の次世代エース誕生！"
           ],
           high: [
               "かなりのシャリ度！あとちょっとで極上です",
               "シャリっとした雰囲気、素晴らしい！",
               "このシャリ感、惚れ惚れします！",
               "シャリ修行の成果が出ています！"
           ],
           medium: [
               "まずまずのシャリ具合。精進あるのみ！",
               "シャリとしては及第点です",
               "シャリの道も一歩一歩",
               "シャリ修行の途中かな？"
           ],
           low: [
               "シャリ度が物足らない...精米しましょう",
               "もっと白くなれる可能性を秘めています",
               "シャリの道はまだまだ長いです",
               "シャリ修行が必要かもしれません..."
           ],
           critical: [
               "あなた...もしかして玄米派？",
               "シャリの概念がありません",
               "酢飯を見直すところから始めましょう",
               "シャリ度緊急事態発生！"
           ]
       }
       
        // アドバイスデータ
       const advices = [
           "白米をもっと食べましょう",
           "寿司屋で修行を積むことをおすすめします",
           "日光に当たりすぎると玄米化するので注意",
           "シャリ度を上げるには握り寿司を週3回",
           "酢飯マイスターの称号まであと一歩！"
       ];

       // シーン初期化処理
       export function init(instance: any) {
           // WebTaleKitのインスタンスを取得
           api = instance;
       }

       // メッセージウインドウのクリア処理
       export function clearText() {
           // テキストクリア処理
           api.drawer.clearText();
       }

       // 画面クリア処理
       export function clear() {
           // 画像クリア処理
           (document.querySelector('.facePicture') as HTMLImageElement).setAttribute("src", "./src/resource/background/300x200.png");
           (document.querySelector('.result') as HTMLElement).style.visibility = 'hidden';
           (document.querySelector('progress') as HTMLElement).setAttribute("value", String(0));
           (document.querySelector('.scoreText') as HTMLElement).innerHTML = `シャリ度：000`;
           clearText();
       }

        // 結果表示処理
       export function showResult() {
           // 結果表示処理
           result = judge();
           (document.querySelector('.result') as HTMLElement).style.visibility = 'visible';
           (document.querySelector('progress') as HTMLElement).setAttribute("value", result.score.toString());
           (document.querySelector('.scoreText') as HTMLElement).innerHTML = `シャリ度：${result.score}`;
           (document.querySelector('.title') as HTMLElement).innerHTML = '判定結果';
           (document.querySelector('.resultMessage') as HTMLElement).innerHTML = result.message;
           (document.querySelector('.advice') as HTMLElement).innerHTML = `アドバイス： ${result.advice}`;
       }

        // シャリ度判定処理
       export function judge() {
           let messageArray = [];
           const score = Math.floor(Math.random() * 101)
           // スコアに応じてメッセージを選択
           if (score >= 90) messageArray = shariMessages.perfect
           else if (score >= 70) messageArray = shariMessages.high
           else if (score >= 50) messageArray = shariMessages.medium
           else if (score >= 30) messageArray = shariMessages.low
           else messageArray = shariMessages.critical
           result = {
               score: score,
               message: messageArray[Math.floor(Math.random() * messageArray.length)],
               advice: advices[Math.floor(Math.random() * advices.length)]
           }
           return result;
       }

       // デバイス取得処理
       export function getDevice() {
           // デバイス取得処理
           const ua = navigator.userAgent.toLowerCase()
           if (/android|iphone|ipad|ipod/.test(ua)) {
               return 'mobile'
           } else {
               return 'pc'
           }
       }

        // 画像取得処理
       export function getPicture(mode = 1) {
           // 画像取得処理
           const input = document.createElement('input');
           // カメラ撮影かファイル選択かを判定
           input.type = 'file'
           if (mode === 0) input.capture = 'environment';
           input.accept = 'image/*';
           input.onchange = (event: any) => {
               const file = event.target.files[0];
               if (file) {
                   const reader = new FileReader();
                   reader.onload = async () => {
                       const imageData = reader.result;
                       (document.querySelector('.facePicture') as HTMLImageElement).setAttribute("src", imageData as string);
                       // 画面イベントを発火
                       (document.querySelector('#gameContainer') as HTMLElement).dispatchEvent(new PointerEvent('click', { bubbles: true }));

                   };
                   reader.readAsDataURL(file);
               }
           };
           input.click();
       }

        // Xへのシェア処理
       export const shareToX = (result: {[key:string]: string | number}) => {
           const text = `私のシャリ男度は${result.score}%です！\n 「${result.message}」 \n アドバイス： ${result.advice}\n\n #シャリ男度測定 #クソアプリアドベントカレンダー`
           const url = 'https://shari-face-detector.vercel.app/'
           const encodedText = encodeURIComponent(text)
           const encodedUrl = encodeURIComponent(url)
           const shareUrl = `https://twitter.com/intent/tweet?text=${encodedText}&url=${encodedUrl}`
           // ポップアップウィンドウを開く
           window.open(
               shareUrl,
               'share_x',
               'width=550,height=420,menubar=no,toolbar=no,scrollbars=yes'
           )
           return true
       }
  </script>
</scene>